syntax = "proto3";

option go_package = "proto";

service Dekart {
    rpc CreateReport(CreateReportRequest) returns (CreateReportResponse) {}
    rpc CreateQuery(CreateQueryRequest) returns (CreateQueryResponse) {}
    rpc UpdateQuery(UpdateQueryRequest) returns (UpdateQueryResponse) {}
    rpc UpdateReport(UpdateReportRequest) returns (UpdateReportResponse) {}
    rpc ArchiveReport(ArchiveReportRequest) returns (ArchiveReportResponse) {}
    rpc RunQuery(RunQueryRequest) returns (RunQueryResponse) {}
    rpc GetReportStream(ReportStreamRequest) returns (stream ReportStreamResponse) {}
    rpc GetReportListStream(ReportListRequest) returns (stream ReportListResponse) {}
}


message ArchiveReportRequest {
    string report_id = 1;
    bool archive = 2;
}

message ArchiveReportResponse {}

message ReportListRequest{

}

message ReportListResponse {
    repeated Report reports = 1;
}

message Report {
    string id = 1;
    string map_config = 2;
    string title = 3;
    bool archived = 4;
}

message Query {
    string id = 1;
    string report_id = 2;
    string query_text = 3;

    enum JobStatus {
        JOB_STATUS_UNSPECIFIED = 0;
        JOB_STATUS_PENDING = 1;
        JOB_STATUS_RUNNING = 2;
        JOB_STATUS_DONE = 3;
    }

    JobStatus job_status = 4;
    string job_result_id = 5;
    string job_error = 6;
}

message UpdateReportRequest {
    Report report = 1;
}

message UpdateReportResponse {
}

message RunQueryRequest {
    string query_id = 1;
}

message RunQueryResponse {
}

message UpdateQueryRequest {
    Query query = 1;
}

message UpdateQueryResponse {
    Query query = 1;
}

message CreateQueryRequest {
    Query query = 1;
}

message CreateQueryResponse {
    Query query = 1;
}

message ReportStreamRequest {
    Report report = 1;
}

message ReportStreamResponse {
    Report report = 1;
    repeated Query queries = 2;
}

message CreateReportRequest {

}

message CreateReportResponse {
    Report report = 1;
}